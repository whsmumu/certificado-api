services:
  db:
    image: postgres:16
    container_name: postgresDB
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - certificadonm-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["dev"]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "15432:80"
    depends_on:
      - db
    networks:
      - certificadonm-network
    restart: always
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles: ["dev"]

  app-dev:
    image: maven:3.9.6-eclipse-temurin-21
    container_name: backend-dev
    working_dir: /app
    command: sh -c "mvn install -DskipTests && java -jar target/*.jar"
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_URL: ${SPRING_URL}
      SPRING_USERNAME: ${SPRING_USERNAME}
      SPRING_PASSWORD: ${SPRING_PASSWORD}
    volumes:
      - ./pom.xml:/app/pom.xml
      - ./src:/app/src
      - ./target:/app/target
      - ~/.m2:/root/.m2
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - certificadonm-network
    profiles: ["dev"]

  app:
    build: .
    container_name: backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_URL: ${SPRING_URL}
      SPRING_USERNAME: ${SPRING_USERNAME}
      SPRING_PASSWORD: ${SPRING_PASSWORD}

      LDAP_URLS: ${LDAP_URLS}
      LDAP_BASE_DN: ${LDAP_BASE_DN}
      LDAP_MANAGER_DN: ${LDAP_MANAGER_DN}
      LDAP_MANAGER_PASSWORD: ${LDAP_MANAGER_PASSWORD}
    depends_on:
      - db
    restart: always
    networks:
      - certificadonm-network
    ports:
      - "8080:8080"
    profiles: ["prod"]

  frontend:
    image: node:20-alpine
    container_name: front-login-dev
    working_dir: /app
    volumes:
      - ../certificadoapi-front-login:/app
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm run dev"
    networks:
      - certificadonm-network
    depends_on:
      - app-dev
    profiles: ["dev"]

networks:
  certificadonm-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
